---
AWSTemplateFormatVersion: 2010-09-09
Description: Example VPC with 3 AvailabilityZone

Parameters:

  VpcBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  SingleNatGateway:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    Description: Set to "false", if you use independent Nat Gateway in each AvailabilityZone.

  ServerCertificateArn:
    Type: String
    Default: none
    Description: Set to "none", if you do not use VPN.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - VpcBlock
          - SingleNatGateway
          - ServerCertificateArn
    ParameterLabels:
      VpcBlock:
        default: VPC Block
      SingleNatGateway:
        default: Use Single NatGateway at each AvailabilityZone
      ServerCertificateArn:
        default: Server Certificate ARN for Client VPN

Conditions:
  CreateSingleNatGateway: !Equals [ !Ref SingleNatGateway, true ]
  CreateMultipleNatGateway: !Equals [ !Ref SingleNatGateway, false ]
  CreateClientVpnEndpoint: !Not [ !Equals [ !Ref ServerCertificateArn, 'none' ] ]

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !Ref VpcBlock, 6, 8 ] ]
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet01"

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Cidr [ !Ref VpcBlock, 6, 8 ] ]
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet02"

  PublicSubnet03:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !Ref VpcBlock, 6, 8 ] ]
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet03"

  SecureSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 3, !Cidr [ !Ref VpcBlock, 6, 8 ] ]
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-SecureSubnet01"

  SecureSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 4, !Cidr [ !Ref VpcBlock, 6, 8 ] ]
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-SecureSubnet02"

  SecureSubnet03:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 5, !Cidr [ !Ref VpcBlock, 6, 8 ] ]
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-SecureSubnet03"

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !Ref VpcBlock, 8, 12 ] ]
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet01"

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 3, !Cidr [ !Ref VpcBlock, 8, 12 ] ]
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet02"

  PrivateSubnet03:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 4, !Cidr [ !Ref VpcBlock, 8, 12 ] ]
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet03"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-public-igw"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation03:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet03
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetNetworkAclAssociation01:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl

  PublicSubnetNetworkAclAssociation02:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl

  PublicSubnetNetworkAclAssociation03:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet03
      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl

  NatGateway01:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt NatEIP01.AllocationId
      SubnetId: !Ref PublicSubnet01

  NatGateway02:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGatewayAttachment
    Condition: CreateMultipleNatGateway
    Properties:
      AllocationId: !GetAtt NatEIP02.AllocationId
      SubnetId: !Ref PublicSubnet02

  NatGateway03:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGatewayAttachment
    Condition: CreateMultipleNatGateway
    Properties:
      AllocationId: !GetAtt NatEIP03.AllocationId
      SubnetId: !Ref PublicSubnet03

  NatEIP01:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  NatEIP02:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Condition: CreateMultipleNatGateway
    Properties:
      Domain: vpc

  NatEIP03:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Condition: CreateMultipleNatGateway
    Properties:
      Domain: vpc

  NatRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-private-nat-01"

  NatRouteTable02:
    Type: AWS::EC2::RouteTable
    Condition: CreateMultipleNatGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-private-nat-02"

  NatRouteTable03:
    Type: AWS::EC2::RouteTable
    Condition: CreateMultipleNatGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-private-nat-03"

  NatRoute01:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref NatRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  NatRoute02:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Condition: CreateMultipleNatGateway
    Properties:
      RouteTableId: !Ref NatRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02

  NatRoute03:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Condition: CreateMultipleNatGateway
    Properties:
      RouteTableId: !Ref NatRouteTable03
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway03

  PrivateSubnetRouteTableAssociation01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref NatRouteTable01

  PrivateSubnetRouteTableAssociation02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateMultipleNatGateway
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref NatRouteTable02

  PrivateSubnetRouteTableAssociation02SingleNatGateway:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSingleNatGateway
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref NatRouteTable01

  PrivateSubnetRouteTableAssociation03:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateMultipleNatGateway
    Properties:
      SubnetId: !Ref PrivateSubnet03
      RouteTableId: !Ref NatRouteTable03

  PrivateSubnetRouteTableAssociation03SingleNatGateway:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSingleNatGateway
    Properties:
      SubnetId: !Ref PrivateSubnet03
      RouteTableId: !Ref NatRouteTable01

  # Client VPN
  ClientVpnEndpoint:
    Type: AWS::EC2::ClientVpnEndpoint
    Condition: CreateClientVpnEndpoint
    Properties:
      #Description: String
      ClientCidrBlock: !Select [ 63, !Cidr [ !Ref VpcBlock, 64, 10 ] ]
      ServerCertificateArn: !Ref ServerCertificateArn
      AuthenticationOptions: 
        - MutualAuthentication: 
            ClientRootCertificateChainArn: !Ref ServerCertificateArn
          Type: certificate-authentication
      ConnectionLogOptions: 
        #CloudwatchLogGroup: String
        #CloudwatchLogStream: String
        Enabled: false
      DnsServers: 
        - !Join [ ".", [ !Select [0, !Split [ "." , !Ref VpcBlock ] ], !Select [1, !Split [ "." , !Ref VpcBlock ] ], !Select [2, !Split [ "." , !Ref VpcBlock ] ], 2 ] ]
      TransportProtocol: udp
      SplitTunnel: true

  ClientVpnAuthorizationRule:
    Type: AWS::EC2::ClientVpnAuthorizationRule
    Condition: CreateClientVpnEndpoint
    Properties: 
      AuthorizeAllGroups: true
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      TargetNetworkCidr: 0.0.0.0/0

  ClientVpnTargetNetworkAssociation01:
    Type: AWS::EC2::ClientVpnTargetNetworkAssociation
    DependsOn: VPCGatewayAttachment
    Condition: CreateClientVpnEndpoint
    Properties: 
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      SubnetId: !Ref PrivateSubnet01

  ClientVpnTargetNetworkAssociation02:
    Type: AWS::EC2::ClientVpnTargetNetworkAssociation
    DependsOn: VPCGatewayAttachment
    Condition: CreateClientVpnEndpoint
    Properties: 
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      SubnetId: !Ref PrivateSubnet02

  ClientVpnTargetNetworkAssociation03:
    Type: AWS::EC2::ClientVpnTargetNetworkAssociation
    DependsOn: VPCGatewayAttachment
    Condition: CreateClientVpnEndpoint
    Properties: 
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      SubnetId: !Ref PrivateSubnet03

  ClientVpnRoute01:
    Type: AWS::EC2::ClientVpnRoute
    DependsOn: ClientVpnTargetNetworkAssociation01
    Condition: CreateClientVpnEndpoint
    Properties: 
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      DestinationCidrBlock: !Select [ 0, !Cidr [ !Ref VpcBlock, 6, 8 ] ]
      TargetVpcSubnetId: !Ref PrivateSubnet01

  ClientVpnRoute02:
    Type: AWS::EC2::ClientVpnRoute
    DependsOn: ClientVpnTargetNetworkAssociation02
    Condition: CreateClientVpnEndpoint
    Properties: 
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      DestinationCidrBlock: !Select [ 1, !Cidr [ !Ref VpcBlock, 6, 8 ] ]
      TargetVpcSubnetId: !Ref PrivateSubnet02

  ClientVpnRoute03:
    Type: AWS::EC2::ClientVpnRoute
    DependsOn: ClientVpnTargetNetworkAssociation03
    Condition: CreateClientVpnEndpoint
    Properties: 
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      DestinationCidrBlock: !Select [ 2, !Cidr [ !Ref VpcBlock, 6, 8 ] ]
      TargetVpcSubnetId: !Ref PrivateSubnet03

Outputs:

  VpcId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"

  PublicSubnet01:
    Description: Public subnet 01 ID
    Value: !Ref PublicSubnet01
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet01ID"

  PublicSubnet02:
    Description: Public subnet 02 ID
    Value: !Ref PublicSubnet02
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet02ID"

  PublicSubnet03:
    Description: Public subnet 03 ID
    Value: !Ref PublicSubnet03
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet03ID"

  SecureSubnet01:
    Description: Secure subnet 01 ID
    Value: !Ref SecureSubnet01
    Export:
      Name: !Sub "${AWS::StackName}-SecureSubnet01ID"

  SecureSubnet02:
    Description: Secure subnet 02 ID
    Value: !Ref SecureSubnet02
    Export:
      Name: !Sub "${AWS::StackName}-SecureSubnet02ID"

  SecureSubnet03:
    Description: Secure subnet 03 ID
    Value: !Ref SecureSubnet03
    Export:
      Name: !Sub "${AWS::StackName}-SecureSubnet03ID"

  PrivateSubnet01:
    Description: Private subnet 01 ID
    Value: !Ref PrivateSubnet01
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet01ID"

  PrivateSubnet02:
    Description: Private subnet 02 ID
    Value: !Ref PrivateSubnet02
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet02ID"

  PrivateSubnet03:
    Description: Private subnet 03 ID
    Value: !Ref PrivateSubnet03
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet03ID"
