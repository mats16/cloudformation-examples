---
AWSTemplateFormatVersion: 2010-09-09
Description: Growi on AWS

Parameters:

  VpcId:
    Type: AWS::EC2::VPC::Id

  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

  DomainName:
    Type: String
    Default: example.com

  GrowiDockerImage:
    Type: String
    Default: weseek/growi:3.5.18

  NodeEnv:
    Type: String
    Default: production
    AllowedValues:
      - production
      - development

  AppPort:
    Type: Number
    Default: 3000

  DBUsername:
    Type: String
    Default: growi

  DBPort:
    Type: Number
    Default: 27017

  DBInstanceClass:
    Type: String
    Default: db.r5.large
    AllowedValues:
      - db.r5.large
      - db.r5.xlarge
      - db.r5.2xlarge
      - db.r5.4xlarge
      - db.r5.12xlarge
      - db.r5.24xlarge

  ElasticsearchDedicatedMasterEnabled:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

  ElasticsearchDedicatedMasterType:
    Type: String
    Default: t2.small.elasticsearch
    AllowedValues:
      - t2.small.elasticsearch

  ElasticsearchInstanceCount:
    Type: Number
    Default: 2

  ElasticsearchInstanceType:
    Type: String
    Default: t2.small.elasticsearch
    AllowedValues:
      - t2.small.elasticsearch
      - t2.medium.elasticsearch
      - m5.large.elasticsearch
      - m5.xlarge.elasticsearch
      - m5.2xlarge.elasticsearch
      - m5.4xlarge.elasticsearch
      - m5.12xlarge.elasticsearch

  ElasticsearchVolumeSize:
    Type: Number
    Default: 10

  ElasticsearchVersion:
    Type: String
    Default: 6.8
    AllowedValues:
      - 7.1
      - 6.8
      - 6.7
    "Description" : "7.1 is not supported yet."

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - PublicSubnetIds
          - PrivateSubnetIds
      -
        Label:
          default: "Application Configuration"
        Parameters:
          - GrowiDockerImage
          - NodeEnv
          - AppPort
      -
        Label:
          default: "MongoDB Configuration"
        Parameters:
          - DBUsername
          - DBPort
          - DBInstanceClass
      -
        Label:
          default: "Elasticsearch Configuration"
        Parameters:
          - ElasticsearchDedicatedMasterEnabled
          - ElasticsearchDedicatedMasterType
          - ElasticsearchInstanceCount
          - ElasticsearchInstanceType
          - ElasticsearchVolumeSize
          - ElasticsearchVersion
    ParameterLabels: {}

Resources:

  elbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: for Growi LoadBalancer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId

  appSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: for Growi App
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          SourceSecurityGroupId: !Ref elbSecurityGroup
      VpcId: !Ref VpcId

  dbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: for Growi DB
      SecurityGroupIngress:
        - Description: for MongoDB
          IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          SourceSecurityGroupId: !Ref appSecurityGroup
        - Description: for Elasticsearch
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref appSecurityGroup
      VpcId: !Ref VpcId

  GrowiDBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBUsername}"}'
        GenerateStringKey: password
        PasswordLength: 8
        ExcludeCharacters: '"@/\'

  GrowiDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Subnet Group for Growi
      SubnetIds: !Ref PrivateSubnetIds

  GrowiDBClusterParameterGroup:
    Type: "AWS::DocDB::DBClusterParameterGroup"
    Properties:
       Description: Disable TLS
       Family: docdb3.6
       Parameters: {"tls": "disabled"}

  GrowiDBCluster: 
    Type: "AWS::DocDB::DBCluster"
    Properties: 
      #BackupRetentionPeriod : 8
      DBClusterParameterGroupName : !Ref GrowiDBClusterParameterGroup
      DBSubnetGroupName : !Ref GrowiDBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref dbSecurityGroup
      MasterUsername : !Ref DBUsername
      MasterUserPassword : !Sub '{{resolve:secretsmanager:${GrowiDBSecret}:SecretString:password}}'
      Port : !Ref DBPort
      #PreferredBackupWindow : "07:34-08:04"
      #PreferredMaintenanceWindow : "sat:04:51-sat:05:21"
      StorageEncrypted : true
      #EnableCloudwatchLogsExports:
      #  - audit
      #  - profiler

  GrowiDBInstance1:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier: !Ref GrowiDBCluster
      DBInstanceClass: !Ref DBInstanceClass

  #GrowiTaskRole: 
  #  Type: "AWS::IAM::Role"
  #  Properties:
  #    AssumeRolePolicyDocument: 
  #      Version: "2012-10-17"
  #      Statement: 
  #        - 
  #          Effect: "Allow"
  #          Principal:
  #            Service: 
  #              - "ecs-tasks.amazonaws.com"
  #          Action: "sts:AssumeRole"
  #    Path: /
  #    Policies: []

  LogGroup: 
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}
      RetentionInDays: 7

  TaskDefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}
      RequiresCompatibilities: 
        - "FARGATE"
      NetworkMode: awsvpc
      Cpu: "256"
      Memory: "512"
      #TaskRoleArn: !Ref GrowiTaskRole
      ExecutionRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole'
      ContainerDefinitions: 
        - 
          Name: growi
          Image: !Ref GrowiDockerImage
          Essential: "true"
          PortMappings: 
            - ContainerPort: !Ref AppPort
          Environment:
            - Name: MONGO_URI
              Value: !Sub 'mongodb://${DBUsername}:{{resolve:secretsmanager:${GrowiDBSecret}:SecretString:password}}@${GrowiDBCluster.Endpoint}:${DBPort}/growi'
            - Name: NODE_ENV
              Value: !Ref NodeEnv
            - Name: PORT
              Value: !Ref AppPort
            - Name: ELASTICSEARCH_URI
              Value: !Sub 'https://${Elasticsearch.DomainEndpoint}/growi'
          #Secrets:
          #  - Name: DB_SECRET
          #    ValueFrom: !Ref GrowiDBSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs

  Cluster:
    Type: AWS::ECS::Cluster

  Service:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties: 
      Cluster: !Ref Cluster
      DesiredCount: 1
      #EnableECSManagedTags: true
      #HealthCheckGracePeriodSeconds: Integer
      LaunchType: FARGATE
      LoadBalancers: 
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: growi
          ContainerPort: !Ref AppPort
      NetworkConfiguration: 
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref appSecurityGroup
          Subnets: !Ref PrivateSubnetIds
      TaskDefinition: !Ref TaskDefinition

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !Ref elbSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '10'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Protocol: HTTP
      Port: !Ref AppPort
      VpcId: !Ref VpcId
      HealthCheckProtocol: HTTP
      HealthCheckPath: /_api/v3/healthcheck
      Matcher:
        HttpCode: 200
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '10'
        - Key: slow_start.duration_seconds
          Value: '30'

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref Certificate
      LoadBalancerArn: !Ref ALB
      Protocol: HTTPS
      Port: '443'
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS

  User:
    Type: AWS::IAM::User
    Properties: 
      Path: "/"
      Policies:
        - PolicyName: s3
          PolicyDocument: !Sub |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "s3:DeleteObject",
                            "s3:GetBucketLocation",
                            "s3:GetObject",
                            "s3:ListBucket",
                            "s3:PutObject",
                            "s3:PutObjectAcl"
                        ],
                        "Resource": [
                            "${Bucket.Arn}",
                            "${Bucket.Arn}/*"
                        ]
                    }
                ]
            }

  AccessKey:
    Type: AWS::IAM::AccessKey
    Properties: 
      Serial: 1
      Status: Active
      UserName: !Ref User

  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub 'growi-${NodeEnv}-${AWS::Region}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  Elasticsearch:
    Type: AWS::Elasticsearch::Domain
    DependsOn: LogsResourcePolicy
    Properties: 
      AccessPolicies: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "*"
                ]
              },
              "Action": [
                "es:*"
              ],
              "Resource": "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*"
            }
          ]
        }
      EBSOptions: 
        EBSEnabled: true
        VolumeSize: !Ref ElasticsearchVolumeSize
        VolumeType: gp2
      ElasticsearchClusterConfig: 
        #DedicatedMasterCount: 3
        DedicatedMasterEnabled: !Ref ElasticsearchDedicatedMasterEnabled
        #DedicatedMasterType: !Ref ElasticsearchDedicatedMasterType
        InstanceCount: !Ref ElasticsearchInstanceCount
        InstanceType: !Ref ElasticsearchInstanceType
        ZoneAwarenessConfig:
           AvailabilityZoneCount: 2
        ZoneAwarenessEnabled: true
      ElasticsearchVersion: !Ref ElasticsearchVersion
      #EncryptionAtRestOptions: 
      #  EncryptionAtRestOptions
      #NodeToNodeEncryptionOptions: 
      #  NodeToNodeEncryptionOptions
      #SnapshotOptions: 
      #  SnapshotOptions
      #Tags: 
      #  - Tag
      VPCOptions: 
        SecurityGroupIds: 
          - !Ref dbSecurityGroup
        SubnetIds:
          - !Select [ 0, !Ref PrivateSubnetIds ]
          - !Select [ 1, !Ref PrivateSubnetIds ]
      #AdvancedOptions: 
      #  rest.action.multi.allow_explicit_index: "true"
      LogPublishingOptions:
        INDEX_SLOW_LOGS:
          CloudWatchLogsLogGroupArn: !Sub "${ElasticsearchSlowLogGroup.Arn}"
          Enabled: true
        SEARCH_SLOW_LOGS:
          CloudWatchLogsLogGroupArn: !Sub "${ElasticsearchIndexLogGroup.Arn}"
          Enabled: true
        ES_APPLICATION_LOGS:
          CloudWatchLogsLogGroupArn: !Sub "${ElasticsearchErrorLogGroup.Arn}"
          Enabled: true

  ElasticsearchSlowLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/aes/stacks/${AWS::StackName}/search-logs
      RetentionInDays: 7

  ElasticsearchIndexLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/aes/stacks/${AWS::StackName}/index-logs
      RetentionInDays: 7

  ElasticsearchErrorLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/aes/stacks/${AWS::StackName}/application-logs
      RetentionInDays: 7

  # Custom Resource
  PutPolicyFunctionRole: 
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal:
              "Service": "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess"
      Policies:
        - PolicyName: PutResourcePolicy
          PolicyDocument: !Sub |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                          "logs:DeleteResourcePolicy",
                          "logs:PutResourcePolicy"
                        ],
                        "Resource": [
                            "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group::log-stream:"
                        ]
                    }
                ]
            }

  PutPolicyFunction: 
    Type: "AWS::Lambda::Function"
    Properties:
      Runtime: "python3.6"
      Role: !Sub ${PutPolicyFunctionRole.Arn}
      Timeout: 5
      TracingConfig:
        Mode: "Active"
      Handler: "index.handler"
      Code:
        ZipFile: |
          from __future__ import print_function
          import cfnresponse
          import boto3
          from botocore.exceptions import ClientError
          import json

          client = boto3.client('logs')

          def PutPolicy(name, document):
              response = client.put_resource_policy(
                policyName=name,
                policyDocument=document,
              )
              return

          def DeletePolicy(name):
              response = client.delete_resource_policy(
                  policyName=name,
              )
              return

          def handler(event, context):
              print(json.dumps(event))
              PolicyName = event['ResourceProperties']['PolicyName']
              PolicyDocument = event['ResourceProperties']['PolicyDocument']
              responseData = {}
              try:
                  if event['RequestType'] == "Delete":
                      DeletePolicy(PolicyName)
                  elif event['RequestType'] == "Create":
                      PutPolicy(PolicyName, PolicyDocument)
                  responseData['Data'] = "SUCCESS"
                  status=cfnresponse.SUCCESS
              except ClientError as e:
                  responseData['Data'] = "FAILED"
                  status=cfnresponse.FAILED
                  print("Unexpected client error: %s" % e)
              except Exception as e:
                  responseData['Data'] = "FAILED"
                  status=cfnresponse.FAILED
                  print("Unexpected error: %s" % e)
              cfnresponse.send(event, context, status, responseData, "CustomResourcePhysicalID")

  LogsResourcePolicy:
    Type: Custom::LogsResourcePolicy
    Version: 1.0
    Properties:
      ServiceToken: !Sub ${PutPolicyFunction.Arn}
      PolicyName: !Sub ${AWS::StackName}-elasticsearch-logs
      PolicyDocument: !Sub '{
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "0", 
            "Effect": "Allow", 
            "Principal": { "Service": "es.amazonaws.com" },
            "Action":[
              "logs:PutLogEvents",
              "logs:PutLogEventsBatch",
              "logs:CreateLogStream"
            ],
            "Resource": [
              "${ElasticsearchSlowLogGroup.Arn}",
              "${ElasticsearchIndexLogGroup.Arn}",
              "${ElasticsearchErrorLogGroup.Arn}"
            ]
          }
        ]
      }'

Outputs:

  Bucket:
    Value: !Ref Bucket

  AccessKey:
    Value: !Ref AccessKey

  SecretAccessKey:
    Value: !GetAtt AccessKey.SecretAccessKey

  GetDBPasswordByCLI:
    Value: !Sub |+
        aws secretsmanager get-secret-value
          --secret-id ${GrowiDBSecret}
          --region ${AWS::Region}
          --query SecretString
