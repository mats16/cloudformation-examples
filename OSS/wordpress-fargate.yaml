---
AWSTemplateFormatVersion: 2010-09-09
Description: Wordpress on Fargate

Parameters:

  VpcId:
    Type: AWS::EC2::VPC::Id

  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: You need to choice 2+ subnets.

  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: You need to choice 3 subnets.

  WordpressDockerImage:
    Type: String
    Default: wordpress:5.5.1-php7.4-apache

  FargatePlatformVersion:
    Type: String
    Default: 1.4.0

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - PublicSubnetIds
          - PrivateSubnetIds
      - Label:
          default: "Application Configuration"
        Parameters:
          - WordpressDockerImage
          - FargatePlatformVersion
    ParameterLabels:
      VpcId:
        default: VPC
      PublicSubnetIds:
        default: Public Subnets (for Load Balancer)
      PrivateSubnetIds:
        default: Private Subnets (for Application & Database)
      WordpressDockerImage:
        default: Wordpress Docker Image
      FargatePlatformVersion:
        default: Fargate Platform Version

Resources:

  WordpressDBPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        PasswordLength: 32
        ExcludeCharacters: '"@/\'

  WordpressAuthSalt:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        PasswordLength: 32
        ExcludeCharacters: '"@/\'

  WordpressSecureAuthSalt:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        PasswordLength: 32
        ExcludeCharacters: '"@/\'

  WordpressLoggedInSalt:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        PasswordLength: 32
        ExcludeCharacters: '"@/\'

  WordpressNonceSalt:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        PasswordLength: 32
        ExcludeCharacters: '"@/\'

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Wordpress - Load Balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Wordpress - ECS Task
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LBSecurityGroup
      VpcId: !Ref VpcId

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Wordpress - Aurora MySQL
      SecurityGroupIngress:
        - Description: MySQL Port
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref AppSecurityGroup
      VpcId: !Ref VpcId

  NFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Wordpress - EFS
      SecurityGroupIngress:
        - Description: NFS Port
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref AppSecurityGroup
      VpcId: !Ref VpcId

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Redash
      SubnetIds: !Ref PrivateSubnetIds

  Database:
    Type: AWS::RDS::DBCluster
    Properties:
      DatabaseName: wordpress
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: aurora-mysql
      EngineMode: serverless
      MasterUsername: admin
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${WordpressDBPassword}:SecretString}}'
      ScalingConfiguration: 
        AutoPause: false
      StorageEncrypted: true
      VpcSecurityGroupIds: 
        - !Ref DBSecurityGroup

  ElasticFileSystem:
    Type: AWS::EFS::FileSystem
    Properties: 
      Encrypted: true

  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref ElasticFileSystem
      SecurityGroups: 
        - !Ref NFSSecurityGroup
      SubnetId: !Select [ 0, !Ref PrivateSubnetIds ]

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref ElasticFileSystem
      SecurityGroups: 
        - !Ref NFSSecurityGroup
      SubnetId: !Select [ 1, !Ref PrivateSubnetIds ]

  EFSMountTarget3:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref ElasticFileSystem
      SecurityGroups: 
        - !Ref NFSSecurityGroup
      SubnetId: !Select [ 2, !Ref PrivateSubnetIds ]

  LogGroup: 
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}
      RetentionInDays: 7

  ecsTaskExecutionRole: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal:
              Service: 
                - "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManager
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource:
                  - !Ref WordpressDBPassword
                  - !Ref WordpressAuthSalt
                  - !Ref WordpressSecureAuthSalt
                  - !Ref WordpressLoggedInSalt
                  - !Ref WordpressNonceSalt

  ecsTaskRole: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal:
              Service: 
                - "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"

  Cluster:
    Type: AWS::ECS::Cluster

  TaskDef: 
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}
      TaskRoleArn: !Ref ecsTaskRole
      NetworkMode: awsvpc
      RequiresCompatibilities: 
        - "FARGATE"
      ExecutionRoleArn: !Ref ecsTaskExecutionRole
      Cpu: "1024"
      Memory: "2048"
      ContainerDefinitions: 
        - Name: wordpress
          Image: !Ref WordpressDockerImage
          Essential: "true"
          MountPoints:
            - ContainerPath: /var/www/html/wp-content
              ReadOnly: false
              SourceVolume: ElasticFileSystem
          PortMappings: 
            - ContainerPort: 80
          Environment:
            - Name: WORDPRESS_CONFIG_EXTRA
              Value: "define('WP_HOME', $_SERVER['HTTP_X_FORWARDED_PROTO'] . '://' . $_SERVER['SERVER_NAME']); define('WP_SITEURL', $_SERVER['HTTP_X_FORWARDED_PROTO'] . '://' . $_SERVER['SERVER_NAME']);"
            - Name: WORDPRESS_DB_HOST
              Value: !GetAtt Database.Endpoint.Address
            - Name: WORDPRESS_DB_USER
              Value: admin
            - Name: WORDPRESS_DB_NAME
              Value: wordpress
          Secrets:
            - Name: WORDPRESS_DB_PASSWORD
              ValueFrom: !Ref WordpressDBPassword
            - Name: WORDPRESS_AUTH_SALT
              ValueFrom: !Ref WordpressAuthSalt
            - Name: WORDPRESS_SECURE_AUTH_SALT
              ValueFrom: !Ref WordpressSecureAuthSalt
            - Name: WORDPRESS_LOGGED_IN_SALT
              ValueFrom: !Ref WordpressLoggedInSalt
            - Name: WORDPRESS_NONCE_SALT
              ValueFrom: !Ref WordpressNonceSalt
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Volumes:
        - EFSVolumeConfiguration:
            FilesystemId: !Ref ElasticFileSystem
          Name: ElasticFileSystem

  Service:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties: 
      Cluster: !Ref Cluster
      DesiredCount: 2
      LaunchType: FARGATE
      PlatformVersion: !Ref FargatePlatformVersion
      LoadBalancers: 
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: wordpress
          ContainerPort: 80
      NetworkConfiguration: 
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref AppSecurityGroup
          Subnets: !Ref PrivateSubnetIds
      TaskDefinition: !Ref TaskDef

  ecsAutoscaleRole: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 20
      MinCapacity: 2
      RoleARN: !GetAtt ecsAutoscaleRole.Arn
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      ResourceId: !Sub 'service/${Cluster}/${Service.Name}' 

  TargetTrackingScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: cpu40-target-tracking-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 40.0
        ScaleInCooldown: 900
        ScaleOutCooldown: 300
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !Ref LBSecurityGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Protocol: HTTP
      Port: 80
      VpcId: !Ref VpcId
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      Matcher:
        HttpCode: 200,302

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

Outputs:

  WordpressURL:
    Value: !Sub 'http://${ALB.DNSName}'

  GetDBPasswordByCLI:
    Value: !Sub |+
        aws secretsmanager get-secret-value
          --secret-id ${WordpressDBPassword}
          --region ${AWS::Region}
          --query SecretString
